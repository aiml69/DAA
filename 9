#include <stdio.h>

#define MAX 100

int max(int a, int b) {
    return (a > b) ? a : b;
}

int knapsack(int wt[], int val[], int W, int n, int memo[MAX][MAX]) {
    // Base Case
    if (n == 0 || W == 0)
        return 0;

    // If already calculated
    if (memo[n][W] != -1)
        return memo[n][W];

    if (wt[n-1] <= W) {
        memo[n][W] = max(
            val[n-1] + knapsack(wt, val, W - wt[n-1], n-1, memo),
            knapsack(wt, val, W, n-1, memo)
        );
    } else {
        memo[n][W] = knapsack(wt, val, W, n-1, memo);
    }

    return memo[n][W];
}

int main() {
    int n, W;
    int wt[MAX], val[MAX];
    int memo[MAX][MAX];

    printf("Enter number of items: ");
    scanf("%d", &n);

    printf("Enter weights of items:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &wt[i]);
    }

    printf("Enter values of items:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &val[i]);
    }

    printf("Enter knapsack capacity: ");
    scanf("%d", &W);

    // Initialize memo table with -1
    for (int i = 0; i <= n; i++) {
        for (int j = 0; j <= W; j++) {
            memo[i][j] = -1;
        }
    }

    int maxValue = knapsack(wt, val, W, n, memo);
    printf("Maximum value in knapsack = %d\n", maxValue);

    return 0;
}
